<?php

use Illuminate\Database\Seeder;
use App\Article;

class ArticlesSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        Article::create([

        			'title'=>'5 причин научиться разрабатывать на PHP',
        			'text'=>'Сложно ли выучить PHP?

								Не труднее, чем многие другие языки. PHP широко известен своим низким порогом вхождения. Достаточно легко написать простой код на нем, но чтобы стать настоящим профессионалом, потребуется время. Если вы серьезно настроены стать PHP-разработчиком и гарантированно трудоустроиться, то вам поможет программа обучения GeekUniversity от Mail.Ru Group.

								Насколько язык эффективен для решения различных задач?

								Если мы говорим о задачах, связанных с веб-разработкой, то весьма эффективен. Тем более, что развитие языка не прекращается до сих пор и он постоянно адаптируется под новые нужды разработчиков. Большим плюсом является активное сообщество, которое привносит много полезного для PHP. Существует множество удобных фреймворков, например, Symfony, Yii, Laravel, которые не перестают улучшаться и отвечают высоким стандартам рынка. Есть различные CMS, такие как Drupal, WordPress, Magento, и многие сайты используют их. Наш сайт, например, держится на WordPress.

								Насколько интересно писать на PHP?

								Скучать не придется. Перед профессиональными PHP-разработчиками ставят множество разнообразных задач: начиная от разработки простых сайтов с небольшим количеством логики и заканчивая созданием крупных интернет-магазинов и систем аналитики. Заметим, кстати, что и Facebook, и ВКонтакте написаны на PHP.

								Востребованы ли PHP-разработчики?

								Недостатка в вакансиях на рынке нет. Множество компаний предлагают трудоустройство, как для младших PHP-разработчиков, так и для опытных Senior’ов и тимлидов. Согласно индексу TIOBE, язык PHP всегда находится в первой десятке, что также говорит о том, что его часто выбирают для написания кода. Большинство сайтов написаны на PHP в виду его эффективности и простоты.

								Как мне начать? Где изучить PHP?

								Существует огромное количество обучающих материалов по PHP, начиная книгами и видео, и заканчивая курсами от настоящих профессионалов своего дела. Мы рекомендуем изучать веб-технологии, и PHP в частности, в рамках обучающей программы GeekUniversity, по окончанию которой гарантируется трудоустройство. Также вы приобритёте знания, которые точно пригодятся вам в будущем для вашей карьеры квалифицированного специалиста.',
        			'desc'=>'В наши дни для веб-разработки существует бесчисленное множество инструментов и при этом сфера не перестает расти. В этой статье мы рассмотрим, как сегодня обстоят дела у PHP — языка, который уже много лет на рынке. Обсудим главные вопросы и выясним, осталось ли для него ещё место.',
        			'tag'=>'PHP'


        	]);
 Article::create([

        			'title'=>'Проверочная запись',
        			'text'=>'Прооооооверокаааааа!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!',
        			'desc'=>'Проверка Добавления Статьи',
        			'tag'=>'CSS'


        	]);
 Article::create([

        			'title'=>'18 полезных библиотек для анализа данных в Python',
        			'text'=>'Библиотеки для форматирования и очистки данных


В нашем мире всё запутано и переплетено — то же самое можно сказать и об информации. Недавнее исследование показывает, что очистка данных занимает до 60% времени у специалистов по Data Scienсe. И 57% из них считают, что это самая утомляющая часть работы. Чтобы сделать этот процесс более приятным и быстрым, существует множество библиотек, о которых мы вам и расскажем.

Dora

Эта библиотека предназначена для разведочного анализа данных, а именно — для автоматизации самых болезненных его частей, в том числе и для очистки данных — говорящий пример её работы можно посмотреть на странице проекта на Github.

Datacleaner

Этот проект также может принимать на вход данные в DataFrame (как утверждает разработчик, “datacleaner — не что-то магическое, просто взять необработанный текст и автоматически распарсить его он не может”), и затем выбирает строки с пропущенными или некорректными значениями и исправляет их таким образом, каким вы ему скажете (например, заменяет их на средние или медианные значения).

PrettyPandas

DataFrames, конечно, сильный инструмент, но он создаёт не те таблицы, которые вы бы хотели показать своему боссу. PrettyPandas использует pandas Style API, чтобы привести датафреймы в удобоваримый вид.

Tabulate

Tabulate позволяет выводить в удобном виде списки списков (или другие iterable структуры из iterable структур), списки (или другие структуры) из словарей), двумерные массивы NumPy, pandas.DataFrame и массивы записей NumPy. Причём выгружать он их может не только в консоль, но и в HTML, PHP или Markdown Extra, что является очень приятным дополнением.

Scrubadub

Часто приходится обрабатывать конфиденциальные данные, выдавать которые не стоит (например, если вы работаете в сфере здравоохранения или в сфере финансов). На помощь приходит scrubadub, которая может удалять из списка данных имена, телефоны, URL’и, идентификаторы Skype и многое другое. Естественно, присутствует возможность гибкой настройки того, что именно вы хотите убрать и каким образом.

Arrow

Отдельной проблемой для нативного Python является работа с временем. Нужно парсить строки, учитывать часовые пояса, и на всё это уходят многие строки не очень интересного кода. Эту проблему должна решить библиотека Arrow.

Beautifier

У этой библиотеки довольно простая задача — упростить работу с URL’ами и email-адресами. С её помощью вы можете парсить почтовые адреса по доменами и именам пользователей, а URL-адреса — по доменам и различным параметрам (например, UTM’ам или токенам).

Ftfy

Полное название этой библиотеки — Fixes text for you. Она предназначена для того, чтобы превращать плохие Unicode строки (â€œquotesâ€\x9d или uÌˆ) в хорошие Unicode строки ("quotes" или ü соответственно).

Библиотеки для визуализации данных


Если просматривать страницы Python Package Index, можно найти библиотеки практически для любого отображения данных, от GazeParser‘а для отслеживания движения глаз, до pastalog‘а для отображения развития нейронной сети в реальном времени. Некоторые из этих библиотек крайне узкоспециализированы, а некоторые могут использоваться почти для любой задачи. В этой подборке мы приводим 10 достаточно универсальных Python библиотек для отображения данных.

Matplotlib

Matplotlib за более чем 10 лет своего существования уже фактически стала стандартом визуализации на Python. Многие современные библиотеки для построения графиков проектируются для работы совместно с matplotlib. Некоторые библиотеки, например, pandas или Seaborn, представляют из себя обёртки над matplotlib. Однако вместе с широтой возможностей приходит и сложность в устройстве, и, как следствие, работать с библиотекой тоже не всегда легко. Ещё один минус — оформление в духе 90-х, которое явно не подойдёт для презентаций. Последнее, однако, должен решить релиз 2.0

Seaborn

Как уже было сказано выше, Seaborn — обёртка над matplotlib, привносящая в неё улучшения (главным образом в плане эстетики).

Ggplot

Ggplot базируется на ggplot2 (система построения графиков на языке R) и использует принципы Grammar of Graphics. Как следствие, работа с ней сильно отличается от работы с matplotlib. Если верить автору, библиотека не предназначена для создания сложных персонализированных графиков, а ориентирована скорее на простоту.

Bokeh

Bokeh также использует Grammar of Graphics, однако, в отличии от ggplot, он не портирован с R, а написан на самом Python. Библиотека поддерживает выгрузку в виде объектов JSON, в HTML-документы или интерактивные веб-приложения, равно как и поддерживает передачу данных в реальном времени и в виде потоков.

Pygal

Из основных преимуществ этой библиотеки можно выделить предельную простоту, возможность выгрузки данных в SVG-файлы (аккуратно, при больших объёмах данных SVG, пожалуй, не стоит использовать из-за проблем производительности) и возможность встраивать результат работы в веб-приложения.

Plotly

Так же, как Pygal и Bokeh, Plotly адаптирован для работы в интерактивных веб-приложениях. Его уникальные возможности — контурные графики, дендограммы и 3D чертежи.

Geoplotlib

Как можно догадаться из названия, Geoplotlib предназначена для работы с картами. Для её работы необходим Pyglet (объектно-ориентированный интерфейс). Так как практически ни одна из остальных библиотек не предлагает API для работы с картами, очень приятно иметь ту, которая специально заточена под них.

Gleam

Эта библиотека была написана под вдохновением от пакета Shiny для языка R. Она позволяет превращать результаты анализа данных в интерактивные веб-приложения, используя только Python скрипты, т.е. вам не нужно знать ни HTML, ни CSS, ни JavaScript. Gleam может работать совместно с любой библиотекой визуализации Python. Создав график, вы можете подключить к нему поля для фильтров, чтобы пользователи могли сортировать и отбирать данные, которые им необходимы.

Missingno

Если библиотеки для очистки входных данных от пропущенных полей (путём удаления таких записей целиком, или подстановки средних/медианных значений) вам не подходят, то вы можете легко визуализировать полноту данных с помощью Missingno. Библиотека может не только визуализировать данные, но и сортировать их или отбирать в зависимости от корреляций с, скажем, дендограммами.

Leather

Создатель Leather, Кристофер Гроскопф, удачно описал своё творение: “Leather — чертёжная библиотека для Python для тех, кому нужен график прямо сейчас, и его не волнует насколько он идеален”. Он спроектирован для работы со всеми типами данных и выводит данные в SVG, благодаря чему вы можете масштабировать графики без потери качества (к слову, у нас есть отличная статья о векторных и битовых форматах изображений). Библиотека достаточно новая, поэтому к ней всё ещё отсутствует часть документации. Чертежи с её помощью можно сделать достаточно примитивные, но это только начало ',
        			'desc'=>'Наша подборка будет разбита на две части — первые 8 библиотек предназначены для предварительной обработки и очистки данных от мусора, следующие 10 — для визуализации подготовленных данных.',
        			'tag'=>'Python'


        	]);
    }
}
